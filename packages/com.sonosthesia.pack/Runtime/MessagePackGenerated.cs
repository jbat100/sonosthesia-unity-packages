// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(3)
            {
                { typeof(global::Sonosthesia.Pack.Counting), 0 },
                { typeof(global::Sonosthesia.Pack.Envelope), 1 },
                { typeof(global::Sonosthesia.Pack.Pose), 2 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new MessagePack.Formatters.Sonosthesia.Pack.CountingFormatter();
                case 1: return new MessagePack.Formatters.Sonosthesia.Pack.EnvelopeFormatter();
                case 2: return new MessagePack.Formatters.Sonosthesia.Pack.PoseFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Sonosthesia.Pack
{
    public sealed class CountingFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sonosthesia.Pack.Counting>
    {
        // counter
        private static global::System.ReadOnlySpan<byte> GetSpan_Counter() => new byte[1 + 7] { 167, 99, 111, 117, 110, 116, 101, 114 };
        // from
        private static global::System.ReadOnlySpan<byte> GetSpan_From() => new byte[1 + 4] { 164, 102, 114, 111, 109 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Sonosthesia.Pack.Counting value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Counter());
            writer.Write(value.Counter);
            writer.WriteRaw(GetSpan_From());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.From, options);
        }

        public global::Sonosthesia.Pack.Counting Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Sonosthesia.Pack.Counting();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32199698088816483UL) { goto FAIL; }

                        ____result.Counter = reader.ReadInt32();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1836020326UL) { goto FAIL; }

                        ____result.From = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class EnvelopeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sonosthesia.Pack.Envelope>
    {
        // type
        private static global::System.ReadOnlySpan<byte> GetSpan_Type() => new byte[1 + 4] { 164, 116, 121, 112, 101 };
        // content
        private static global::System.ReadOnlySpan<byte> GetSpan_Content() => new byte[1 + 7] { 167, 99, 111, 110, 116, 101, 110, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Sonosthesia.Pack.Envelope value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            var formatterResolver = options.Resolver;
            writer.WriteMapHeader(2);
            writer.WriteRaw(GetSpan_Type());
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Type, options);
            writer.WriteRaw(GetSpan_Content());
            writer.Write(value.Content);
        }

        public global::Sonosthesia.Pack.Envelope Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var ____result = new global::Sonosthesia.Pack.Envelope();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1701869940UL) { goto FAIL; }

                        ____result.Type = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        continue;
                    case 7:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 32772479322582883UL) { goto FAIL; }

                        ____result.Content = global::MessagePack.Internal.CodeGenHelpers.GetArrayFromNullableSequence(reader.ReadBytes());
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PoseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Sonosthesia.Pack.Pose>
    {
        // x
        private static global::System.ReadOnlySpan<byte> GetSpan_X() => new byte[1 + 1] { 161, 120 };
        // y
        private static global::System.ReadOnlySpan<byte> GetSpan_Y() => new byte[1 + 1] { 161, 121 };
        // z
        private static global::System.ReadOnlySpan<byte> GetSpan_Z() => new byte[1 + 1] { 161, 122 };
        // visibility
        private static global::System.ReadOnlySpan<byte> GetSpan_Visibility() => new byte[1 + 10] { 170, 118, 105, 115, 105, 98, 105, 108, 105, 116, 121 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Sonosthesia.Pack.Pose value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteMapHeader(4);
            writer.WriteRaw(GetSpan_X());
            writer.Write(value.X);
            writer.WriteRaw(GetSpan_Y());
            writer.Write(value.Y);
            writer.WriteRaw(GetSpan_Z());
            writer.Write(value.Z);
            writer.WriteRaw(GetSpan_Visibility());
            writer.Write(value.Visibility);
        }

        public global::Sonosthesia.Pack.Pose Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadMapHeader();
            var ____result = new global::Sonosthesia.Pack.Pose();

            for (int i = 0; i < length; i++)
            {
                var stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 1:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 120UL:
                                ____result.X = reader.ReadSingle();
                                continue;
                            case 121UL:
                                ____result.Y = reader.ReadSingle();
                                continue;
                            case 122UL:
                                ____result.Z = reader.ReadSingle();
                                continue;
                        }
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Visibility().Slice(1))) { goto FAIL; }

                        ____result.Visibility = reader.ReadSingle();
                        continue;

                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

